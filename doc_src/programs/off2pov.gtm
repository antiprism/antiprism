#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<CONT_S_START>>
<small><a href="#usage">Usage</a></small>
<<BARSPACE>>
<small><a href="#examples">Examples</a></small>
<<BARSPACE>>
<small><a href="#notes">Notes</a></small>
<<BARSPACE>>
<small><a href="#struct">POV-Ray File Structure</a></small>
<<CONT_S_END>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Draw a ball pack as balls
<<CMDS_START>>
lat_grid bcc | off2pov -v b -o pack.pov
<<CMDS_END>>

Draw the model rotated 45 degrees aboy the y-axisc
<<CMDS_START>>
lat_grid bcc | off2pov -v b -R 0,45,0 -o pack.pov
<<CMDS_END>>

Draw an icosahedron without its faces
<<CMDS_START>>
off2pov -x f -o icosa.pov icosahedron
<<CMDS_END>>

Draw an icosahedron without its vertex or edge elements
<<CMDS_START>>
off2pov -x ve -o icosa.pov icosahedron
<<CMDS_END>>

Draw an icosahedron with thin vertex and edge elements
<<CMDS_START>>
off2pov -v 0.01 -e 0.008 -o icosa.pov icosahedron
<<CMDS_END>>
<<EXAMPLES_END>>


<<NOTES_START>>
POV format for can be rendered for display by
<a href="http://www.povray.org">POV-Ray</a>.
<p>
The output POV file is easy to edit in a text editor. Many of the program
options which are used when creating the file can also be set afterwards
by editing the file. See <a href="#struct">POV Files Structure</a>.
<p>
Use <i>-v b</i> to draw ball packs.
<p>
Shapes with self-intersecting faces generally need the <i>-t</i> option,
otherwise they may be displayed with missing areas. However this option
may draw parts of the face outside of the edges.
<p>
POV-ray may not be able to display the output, or may display it
incorrectly. I have tried to make the generated file robust, but
precision issues could cause problems in apparently correct POV files.
<p>
Including files and making changes by hand may easily break some of
the basic functionality, for example vertex numbering and some stereo
options.
<p>

<h2><a name="struct">
POV-Ray File Structure
</a></h2>

The POV files output by off2pov contain a number of preset values.
These are either values that were given as options to the program, or
were generated automatically by the program. The POV file has been
structured so that it may be easily changed using include files passed
to the program and by hand editing of the file itself.

<h3>Variables</h3>

<h4>Scene Variables</h4>

These are the variables that appear in the POV scene file. They
appear only once in any set of output.
<dl>
<dt><i>Width</i>
<dd>Maximum distace between 2 points. A figure for the size of all
    the objects in the file.
<dt><i>StereoType</i>
<dd>Stereo type may be 0 - mono, 1 - single image stereo,
    2 - double image file stereo, or 3 a composite of four views.
    If 2 then use the povray option +KFF2 to produce the
    left and right stereo views in separate image files.
<dt><i>Distance</i>
<dd>Distance from viewer to point looked at.
<dt><i>Centre</i>
<dd>The centre of all the objects. The point the objects are rotated about.
<dt><i>PerspFactor</i>
<dd>A value for the width of perspective. If 0 then use 2 for stereo views
    and 4 for mono views. There probably won't be noticeable change above 50.
    Perspective works by moving the viewing distance back and enlarging
    the area which is looked at.
<dt><i>LookAt</i>
<dd>The point the camera looks at.
<dt><i>Rotation</i>
<dd>Rotation about the centre.
<dt><i>Shadow</i>
<dd>Whether the lights cast shadows. 0 - shadows mono no shadows stereo,
    1 - no shadows, 2 - shadows.
<dt><i>BgColour</i>
<dd>Background colour.
<dt><i>MaxTraceLevel</i>
<dd>POV-Ray's max_trace_level. Use a higher value if black
    areas appear when using transparency.
</dl>

A set of default geometry variables may also appear. They have the
same name as the geometry variables but are prefixed by <i>glob_</i>.
The geometries may then set their individual variables to these global
values.
<p>
A different camera and different lights can be given in an include
file. The default camera or lights can be excluded.
<dl>
<dt><i>ExcludeDefCamera</i>
<dd>0 (or undefined) - include default camera, 1 - exclude default camera.
    <p>
<dt><i>ExcludeDefLights</i>
<dd>0 (or undefined) - include default lights, 1 - exclude default lights.
</dl>

<h4>Geometry Variables</h4>

These are the variables associated with each geometry. The geometries
are processed sequentially and new values are written to these variables
at the start of processing.
<dl>
<dt><i>show</i>
<dd>1 - show object, 0 - don't show object.
<dt><i>verts_show</i>
<dd>1 - show vertices, 0 - don't show vertices.
<dt><i>edges_show</i>
<dd>1 - show edges, 0 - don't show edges.
<dt><i>faces_show</i>
<dd>1 - show faces, 0 - don't show faces.
<dt><i>vert_labs_show</i>
<dd>1 - show vertex numbers, 0 - don't show vertex numbers.
<dt><i>edge_labs_show</i>
<dd>1 - show edge numbers, 0 - don't show vertex numbers.
<dt><i>face_labs_show</i>
<dd>1 - show face numbers, 0 - don't show vertex numbers.
<dt><i>vert_sz</i>
<dd>Default radius for vertex spheres.
<dt><i>vert_col</i>
<dd>Default colour for vertex spheres.
<dt><i>vert_tex</i>
<dd>Default texture for vertex spheres.
<dt><i>edge_sz</i>
<dd>Default radius for edge cylinders.
<dt><i>edge_col</i>
<dd>Default colour for edge cylinders.
<dt><i>edge_tex</i>
<dd>Default texture for edge cylinders.
<dt><i>face_col</i>
<dd>Default colour for face polygons.
<dt><i>face_tex</i>
<dd>Default texture for face polygons.
<dt><i>face_dtype</i>
<dd>Display type for faces, may be
    0 - POV-ray polygons,
    1 - triangulate polygons,
    2 - flattened polygons,
<dt><i>col_map</i>
<dd>Array mapping colour indexes to colours.
<dt><i>tex_map</i>
<dd>Array mapping colour indexes to textures.
<dt><i>vert_col_map</i>
<dd>Array mapping vertex colour indexes to colours.
<dt><i>vert_tex_map</i>
<dd>Array mapping vertex colour indexes to textures.
<dt><i>edge_col_map</i>
<dd>Array mapping edge colour indexes to colours.
<dt><i>edge_tex_map</i>
<dd>Array mapping edge colour indexes to textures.
<dt><i>face_col_map</i>
<dd>Array mapping face colour indexes to colours.
<dt><i>face_tex_map</i>
<dd>Array mapping face colour indexes to textures.
</dl>

The elements and colour indexes are held in the following arrays
<dl>
<dt><i>verts</i>
<dd>Vertex coordinates. The array size is held in <i>num_verts</i>.
<dt><i>v_cols</i>
<dd>Vertex colours and colour indexes.
<dt><i>edges</i>
<dd>Edges, each entry is a two item array holding two indexes into the
    <i>verts</i> array. The array size is held in <i>num_edges</i>.
<dt><i>e_cols</i>
<dd>Edge colours and colour indexes.
<dt><i>faces</i>
<dd>Faces, a sequential array of the face values from an OFF file. There
    are two kinds of value, a first number says how many vertices are in
    the face polygon, the next values are the indexes into the <i>verts</i>
    array for these vertices. The next number is the number of vertices in the
    next face, and so on. The array size is held in <i>num_face_items</i>.
    The number of faces is held in <i>num_faces</i>.
<dt><i>f_cols</i>
<dd>Face colours and colour indexes.
</dl>

<h3>Macros</h3>

The elements are drawn using POV-ray macros. These may be overriden,
using an include file passed with option <i>-i</i> or by editing the
POV file, allowing processing and custom drawing of the elements.


<h4><a name="col_map">
Colour Maps
</a></h4>

<pre>col_to_tex(col, elem_tex_map, elem_col_map, def_tex)</pre>
<p>
The <i>col_to_tex</i> macro maps a colour or colour index to
a texture. <i>col</i> is the colour vector, if the second
coefficient is -1 then the first coeefficient is a colour
index, otherwise the vector represents a POV-ray colour.
<i>elem_tex_map</i> maps indexes to textures.
<i>elem_col_map</i> maps indexes to colours.
<i>def_col</i> is the default colour.

The texture is found in the following way
<ol>
<li>If <i>col</i> is a POV colour then use a default texture with this colour
<li>If index <i>col</i> has been set in <i>elem_tex_map</i> then use this
    texture
<li>If index <i>col</i> has been set in <i>elem_col_map</i> then use a
    default texture with this colour.
<li>use the default texture <i>def_tex</i>. This is originally
    set to a texture made from the default colour for the element type.
    It may be overriden by setting it specifically, or through setting
    <i>glob_face_tex</i>.
</ol>

<h4><a name="disp_vertex">
Display Vertex
</a></h4>

<pre>
   disp_vertex(vertex, col)
</pre>
<p>
<i>vertex</i> is the index into the <i>verts</i> array. <i>col</i> is the
colour.


<h4><a name="disp_edge">
Display Edge
</a></h4>

<pre>
   disp_edge(edge, col)
</pre>
<p>

<i>edge</i> is the index into the <i>edges</i> array. <i>col</i> is the colour.

<h4><a name="disp_face">
Display Face
</a></h4>

<pre>
   disp_face(face, idx, col)
</pre>
<p>

<i>face</i> is the face number. <i>idx</i> is the index into the <i>face</i>
array (pointing to the value giving the number of vertices in the face).
<i>col</i> is the colour.
<p>
The default macro calls one of the following macros, determined by
the value of <i>face_dtype</i>, to actually display the face
<p>
<pre>
   disp_face_polygon(face, idx, col)
   disp_face_flattened_polygon(face, idx, col)
</pre>

<h4><a name="disp_extra">
Display Extra
</a></h4>

<pre>
   disp_extra()
</pre>

Called once for each geometry. The default macro does nothing.
<<NOTES_END>>

#include "<<END>>"
